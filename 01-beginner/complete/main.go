package main

import (
	"fmt"
	"log"
	"strconv"

	"github.com/go-playground/validator/v10"
	"github.com/gofiber/fiber/v2"
	"github.com/gofiber/fiber/v2/middleware/cors"
	"github.com/gofiber/fiber/v2/middleware/logger"
	"github.com/gofiber/fiber/v2/middleware/recover"
)

// ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Todo
type Todo struct {
	ID    int    `json:"id"`
	Title string `json:"title"`
	Done  bool   `json:"done"`
}

// ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• todos ‡πÉ‡∏ô memory
var todos []Todo
var nextID = 1

var validate = validator.New()

func main() {
	// ‡∏™‡∏£‡πâ‡∏≤‡∏á Fiber app ‡πÉ‡∏´‡∏°‡πà
	app := fiber.New(fiber.Config{})
	// ‡πÄ‡∏û‡∏¥‡πà‡∏° middleware ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö log ‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á
	app.Use(logger.New(logger.Config{
		Format: "[${ip}]:${port} ${status} - ${method} ${path}\n",
	}))

	app.Use(cors.New())
	// ‡πÄ‡∏û‡∏¥‡πà‡∏° middleware ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ panic
	app.Use(recover.New())

	// ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
	initSampleData()

	// === ROUTES ===

	// Route ‡πÅ‡∏£‡∏Å - Hello World
	app.Get("/hello", func(c *fiber.Ctx) error {
		return c.JSON(fiber.Map{
			"message": "Hello from Go Fiber Todo API!",
			"version": "1.0.0",
		})
	})

	// GET /todos/:id - ‡πÅ‡∏™‡∏î‡∏á todo ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏ï‡∏≤‡∏° ID
	app.Get("/todos/:id", getTodoByID)
	// GET /todos - ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ todo ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
	app.Get("/todos", getTodos)

	// POST /todos - ‡πÄ‡∏û‡∏¥‡πà‡∏° todo ‡πÉ‡∏´‡∏°‡πà
	app.Post("/todos", createTodo)

	// ‡∏£‡∏±‡∏ô server ‡∏ó‡∏µ‡πà port 3000
	err := app.Listen(":3000")
	if err != nil {
		log.Fatal(err)
	}
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
func initSampleData() {
	todos = []Todo{
		{ID: 1, Title: "‡πÄ‡∏£‡∏µ‡∏¢‡∏ô Go Programming", Done: false},
		{ID: 2, Title: "‡∏ó‡∏≥‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå Todo API", Done: true},
		{ID: 3, Title: "‡∏ó‡∏ö‡∏ó‡∏ß‡∏ô Fiber Framework", Done: false},
	}
	nextID = 4 // ID ‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÉ‡∏ä‡πâ
}

// GET /todos - ‡∏Ñ‡∏∑‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ todo ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
func getTodos(c *fiber.Ctx) error {
	return c.JSON(fiber.Map{
		"success": true,
		"data":    todos,
		"count":   len(todos),
	})
}

type QueryParams struct {
	Name string `query:"name" validate:"required"`
}

// GET /todos/:id - ‡∏Ñ‡∏∑‡∏ô todo ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏ï‡∏≤‡∏° ID ?name=John&age=20
func getTodoByID(c *fiber.Ctx) error {
	// ‡∏£‡∏±‡∏ö ID ‡∏à‡∏≤‡∏Å URL parameter
	idParam := c.Params("id")
	fmt.Println("getTodoByID")

	var queryParams QueryParams

	// üîë Validate here
	if err := validate.Struct(&queryParams); err != nil {
		return c.Status(fiber.StatusBadRequest).JSON(fiber.Map{
			"success": false,
			"message": err.Error(), // ‡∏´‡∏£‡∏∑‡∏≠ map ‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ß‡∏¢ ‡πÜ
		})
	}

	err := c.QueryParser(&queryParams)
	if err != nil {
		return c.Status(400).JSON(fiber.Map{
			"success": false,
			"message": "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• query ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á",
		})
	}

	// ‡πÅ‡∏õ‡∏•‡∏á string ‡πÄ‡∏õ‡πá‡∏ô int
	id, err := strconv.Atoi(idParam)
	if err != nil {
		return c.Status(400).JSON(fiber.Map{
			"success": false,
			"message": "ID ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç",
		})
	}

	// ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ todo ‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö ID
	for _, todo := range todos {
		if todo.ID == id {
			return c.JSON(fiber.Map{
				"success": true,
				"data":    todo,
			})
		}
	}

	// ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏û‡∏ö todo
	return c.Status(404).JSON(fiber.Map{
		"success": false,
		"message": "‡πÑ‡∏°‡πà‡∏û‡∏ö todo ‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏",
	})
}

// POST /todos - ‡πÄ‡∏û‡∏¥‡πà‡∏° todo ‡πÉ‡∏´‡∏°‡πà
func createTodo(c *fiber.Ctx) error {
	// ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å client
	type CreateTodoRequest struct {
		Title string `json:"title" validate:"required"`
		Done  bool   `json:"done"`
		Age   int    `json:"age" validate:"required" min:"10"`
	}

	var req CreateTodoRequest

	// ‡πÅ‡∏õ‡∏•‡∏á JSON ‡∏à‡∏≤‡∏Å request body ‡πÄ‡∏õ‡πá‡∏ô struct
	if err := c.BodyParser(&req); err != nil {
		return c.Status(400).JSON(fiber.Map{
			"success": false,
			"message": "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• JSON ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á",
		})
	}

	// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ title ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
	if req.Title == "" {
		return c.Status(400).JSON(fiber.Map{
			"success": false,
			"message": "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏ title",
		})
	}

	// ‡∏™‡∏£‡πâ‡∏≤‡∏á todo ‡πÉ‡∏´‡∏°‡πà
	newTodo := Todo{
		ID:    nextID,
		Title: req.Title,
		Done:  req.Done,
	}
	// curl --location 'https://api.line.me/oauth2/v3/token' \
	// --header 'Content-Type: application/x-www-form-urlencoded' \
	// --data-urlencode 'grant_type=client_credentials' \
	// --data-urlencode 'client_id=2007592502' \
	// --data-urlencode 'client_secret=deb947939de06f14e2a1b3a749c36f80'

	// ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô slice
	todos = append(todos, newTodo)
	nextID++ // ‡πÄ‡∏û‡∏¥‡πà‡∏° ID ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ñ‡∏±‡∏î‡πÑ‡∏õ

	// ‡∏™‡πà‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏•‡∏±‡∏ö
	return c.Status(201).JSON(fiber.Map{
		"success": true,
		"message": "‡∏™‡∏£‡πâ‡∏≤‡∏á todo ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
		"data":    newTodo,
	})
}
