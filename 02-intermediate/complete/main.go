package main

import (
	"context"
	"log"
	"os"
	"strconv"
	"time"

	"github.com/go-playground/validator/v10"
	"github.com/gofiber/fiber/v2"
	"github.com/gofiber/fiber/v2/middleware/logger"
	"github.com/gofiber/fiber/v2/middleware/recover"
	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/bson/primitive"
	"go.mongodb.org/mongo-driver/mongo"
	"go.mongodb.org/mongo-driver/mongo/options"
)

// ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Todo ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö MongoDB
type Todo struct {
	ID        primitive.ObjectID `json:"id" bson:"_id,omitempty"`
	Title     string             `json:"title" bson:"title" validate:"required,min=1"`
	Done      bool               `json:"done" bson:"done"`
	CreatedAt time.Time          `json:"created_at" bson:"created_at"`
	UpdatedAt time.Time          `json:"updated_at" bson:"updated_at"`
}

// Request struct ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á/‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Todo
type TodoRequest struct {
	Title string `json:"title" validate:"required,min=1"`
	Done  bool   `json:"done"`
}

var client *mongo.Client
var todoCollection *mongo.Collection
var validate *validator.Validate

func main() {
	// ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô validator
	validate = validator.New()

	// ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MongoDB
	mongoURI := getEnv("MONGODB_URI", "mongodb://admin:password123@localhost:27017/todoapp?authSource=admin")

	var err error
	client, err = mongo.Connect(context.TODO(), options.Client().ApplyURI(mongoURI))
	if err != nil {
		log.Fatal("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MongoDB:", err)
	}

	// ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
	err = client.Ping(context.TODO(), nil)
	if err != nil {
		log.Fatal("‚ùå MongoDB ping failed:", err)
	}

	// ‡∏Å‡∏≥‡∏´‡∏ô‡∏î collection
	todoCollection = client.Database("todoapp").Collection("todos")
	log.Println("‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MongoDB ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")

	// ‡∏™‡∏£‡πâ‡∏≤‡∏á Fiber app
	app := fiber.New(fiber.Config{
		AppName: "Todo API Intermediate v1.0",
	})

	// Middleware ‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
	app.Use(logger.New(logger.Config{
		Format: "[${ip}]:${port} ${status} - ${method} ${path} (${latency})\n",
	}))
	app.Use(recover.New())

	// Health check endpoint (‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ API Key)
	app.Get("/health", func(c *fiber.Ctx) error {
		// ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ database
		ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
		defer cancel()

		err := client.Ping(ctx, nil)
		dbStatus := "connected"
		if err != nil {
			dbStatus = "disconnected"
		}

		return c.JSON(fiber.Map{
			"status":    "OK",
			"database":  dbStatus,
			"timestamp": time.Now().Format(time.RFC3339),
		})
	})

	// ‡∏Å‡∏•‡∏∏‡πà‡∏° routes ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ API Key
	protected := app.Group("/", APIKeyMiddleware())

	// CRUD Routes
	protected.Get("/todos", getTodos)          // ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡∏û‡∏£‡πâ‡∏≠‡∏° pagination)
	protected.Get("/todos/:id", getTodoByID)   // ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
	protected.Post("/todos", createTodo)       // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡∏°‡πà
	protected.Put("/todos/:id", updateTodo)    // ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
	protected.Delete("/todos/:id", deleteTodo) // ‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£

	// ‡∏£‡∏±‡∏ô server
	port := getEnv("PORT", "3000")
	log.Printf("üöÄ Server starting on port %s", port)
	log.Printf("üìñ API Endpoints:")
	log.Printf("   GET    /health")
	log.Printf("   GET    /todos?page=1&limit=10")
	log.Printf("   GET    /todos/:id")
	log.Printf("   POST   /todos")
	log.Printf("   PUT    /todos/:id")
	log.Printf("   DELETE /todos/:id")
	log.Printf("üí° Headers required: X-API-Key: %s", getEnv("API_SECRET_KEY", "your-secret-key"))

	app.Listen(":" + port)
}

// Middleware ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö API Key
func APIKeyMiddleware() fiber.Handler {
	expectedKey := getEnv("API_SECRET_KEY", "your-secret-key")

	return func(c *fiber.Ctx) error {
		apiKey := c.Get("X-API-Key")
		if apiKey == "" {
			return c.Status(401).JSON(fiber.Map{
				"success": false,
				"error":   "API Key is required",
				"hint":    "Add header: X-API-Key: your-secret-key",
			})
		}

		if apiKey != expectedKey {
			return c.Status(401).JSON(fiber.Map{
				"success": false,
				"error":   "Invalid API Key",
			})
		}

		return c.Next()
	}
}

// GET /todos - ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ todo ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡∏û‡∏£‡πâ‡∏≠‡∏° pagination)
func getTodos(c *fiber.Ctx) error {
	ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
	defer cancel()

	// ‡∏£‡∏±‡∏ö query parameters
	page, _ := strconv.Atoi(c.Query("page", "1"))
	limit, _ := strconv.Atoi(c.Query("limit", "10"))

	// ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
	if page < 1 {
		page = 1
	}
	if limit < 1 || limit > 100 {
		limit = 10
	}

	// ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì skip
	skip := (page - 1) * limit

	// ‡∏™‡∏£‡πâ‡∏≤‡∏á filter ‡πÅ‡∏•‡∏∞ options
	filter := bson.M{}
	findOptions := options.Find()
	findOptions.SetLimit(int64(limit))
	findOptions.SetSkip(int64(skip))
	findOptions.SetSort(bson.D{{Key: "created_at", Value: -1}}) // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà -> ‡πÄ‡∏Å‡πà‡∏≤

	// ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
	cursor, err := todoCollection.Find(ctx, filter, findOptions)
	if err != nil {
		return c.Status(500).JSON(fiber.Map{
			"success": false,
			"error":   "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ",
		})
	}
	defer cursor.Close(ctx)

	var todos []Todo
	if err = cursor.All(ctx, &todos); err != nil {
		return c.Status(500).JSON(fiber.Map{
			"success": false,
			"error":   "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ",
		})
	}

	// ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
	total, err := todoCollection.CountDocuments(ctx, filter)
	if err != nil {
		total = 0
	}

	return c.JSON(fiber.Map{
		"success": true,
		"data":    todos,
		"pagination": fiber.Map{
			"page":        page,
			"limit":       limit,
			"total":       total,
			"total_pages": (total + int64(limit) - 1) / int64(limit),
		},
	})
}

// GET /todos/:id - ‡∏î‡∏π todo ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
func getTodoByID(c *fiber.Ctx) error {
	ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
	defer cancel()

	// ‡πÅ‡∏õ‡∏•‡∏á string ID ‡πÄ‡∏õ‡πá‡∏ô ObjectID
	id := c.Params("id")
	objectId, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return c.Status(400).JSON(fiber.Map{
			"success": false,
			"error":   "ID ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á",
		})
	}

	var todo Todo
	err = todoCollection.FindOne(ctx, bson.M{"_id": objectId}).Decode(&todo)
	if err != nil {
		if err == mongo.ErrNoDocuments {
			return c.Status(404).JSON(fiber.Map{
				"success": false,
				"error":   "‡πÑ‡∏°‡πà‡∏û‡∏ö todo ‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏",
			})
		}
		return c.Status(500).JSON(fiber.Map{
			"success": false,
			"error":   "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•",
		})
	}

	return c.JSON(fiber.Map{
		"success": true,
		"data":    todo,
	})
}

// POST /todos - ‡πÄ‡∏û‡∏¥‡πà‡∏° todo ‡πÉ‡∏´‡∏°‡πà
func createTodo(c *fiber.Ctx) error {
	ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
	defer cancel()

	var req TodoRequest
	if err := c.BodyParser(&req); err != nil {
		return c.Status(400).JSON(fiber.Map{
			"success": false,
			"error":   "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• JSON ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á",
		})
	}

	// Validate ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
	if err := validate.Struct(req); err != nil {
		return c.Status(400).JSON(fiber.Map{
			"success": false,
			"error":   "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á",
			"details": err.Error(),
		})
	}

	// ‡∏™‡∏£‡πâ‡∏≤‡∏á todo ‡πÉ‡∏´‡∏°‡πà
	todo := Todo{
		Title:     req.Title,
		Done:      req.Done,
		CreatedAt: time.Now(),
		UpdatedAt: time.Now(),
	}

	result, err := todoCollection.InsertOne(ctx, todo)
	if err != nil {
		return c.Status(500).JSON(fiber.Map{
			"success": false,
			"error":   "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ",
		})
	}

	// ‡πÄ‡∏ã‡πá‡∏ï ID ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£ insert
	todo.ID = result.InsertedID.(primitive.ObjectID)

	return c.Status(201).JSON(fiber.Map{
		"success": true,
		"message": "‡∏™‡∏£‡πâ‡∏≤‡∏á todo ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
		"data":    todo,
	})
}

// PUT /todos/:id - ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç todo
func updateTodo(c *fiber.Ctx) error {
	ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
	defer cancel()

	// ‡πÅ‡∏õ‡∏•‡∏á ID
	id := c.Params("id")
	objectId, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return c.Status(400).JSON(fiber.Map{
			"success": false,
			"error":   "ID ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á",
		})
	}

	var req TodoRequest
	if err := c.BodyParser(&req); err != nil {
		return c.Status(400).JSON(fiber.Map{
			"success": false,
			"error":   "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• JSON ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á",
		})
	}

	// Validate ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
	if err := validate.Struct(req); err != nil {
		return c.Status(400).JSON(fiber.Map{
			"success": false,
			"error":   "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á",
			"details": err.Error(),
		})
	}

	// ‡∏™‡∏£‡πâ‡∏≤‡∏á update document
	update := bson.M{
		"$set": bson.M{
			"title":      req.Title,
			"done":       req.Done,
			"updated_at": time.Now(),
		},
	}

	// Update document
	result, err := todoCollection.UpdateOne(ctx, bson.M{"_id": objectId}, update)
	if err != nil {
		return c.Status(500).JSON(fiber.Map{
			"success": false,
			"error":   "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ",
		})
	}

	if result.MatchedCount == 0 {
		return c.Status(404).JSON(fiber.Map{
			"success": false,
			"error":   "‡πÑ‡∏°‡πà‡∏û‡∏ö todo ‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏",
		})
	}

	// ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡πÅ‡∏•‡πâ‡∏ß
	var updatedTodo Todo
	err = todoCollection.FindOne(ctx, bson.M{"_id": objectId}).Decode(&updatedTodo)
	if err != nil {
		return c.Status(500).JSON(fiber.Map{
			"success": false,
			"error":   "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡πÑ‡∏î‡πâ",
		})
	}

	return c.JSON(fiber.Map{
		"success": true,
		"message": "‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó todo ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
		"data":    updatedTodo,
	})
}

// DELETE /todos/:id - ‡∏•‡∏ö todo
func deleteTodo(c *fiber.Ctx) error {
	ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
	defer cancel()

	// ‡πÅ‡∏õ‡∏•‡∏á ID
	id := c.Params("id")
	objectId, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return c.Status(400).JSON(fiber.Map{
			"success": false,
			"error":   "ID ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á",
		})
	}

	// ‡∏•‡∏ö document
	result, err := todoCollection.DeleteOne(ctx, bson.M{"_id": objectId})
	if err != nil {
		return c.Status(500).JSON(fiber.Map{
			"success": false,
			"error":   "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ",
		})
	}

	if result.DeletedCount == 0 {
		return c.Status(404).JSON(fiber.Map{
			"success": false,
			"error":   "‡πÑ‡∏°‡πà‡∏û‡∏ö todo ‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏",
		})
	}

	return c.JSON(fiber.Map{
		"success": true,
		"message": "‡∏•‡∏ö todo ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
	})
}

// Helper function ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö environment variables
func getEnv(key, defaultValue string) string {
	if value := os.Getenv(key); value != "" {
		return value
	}
	return defaultValue
}
