package main

import (
	"constructor-di/controller"
	"constructor-di/repository"
	"constructor-di/service"
	"log"

	"github.com/gofiber/fiber/v2"
)

func main() {
	// Create Fiber app
	app := fiber.New()

	// === ðŸ”Œ MANUAL CONSTRUCTOR INJECTION ===

	// 1. à¸ªà¸£à¹‰à¸²à¸‡ Repository (à¸Šà¸±à¹‰à¸™à¸¥à¹ˆà¸²à¸‡à¸ªà¸¸à¸” - à¹„à¸¡à¹ˆà¸¡à¸µ dependencies)
	userRepo := repository.NewUserRepository()

	// 2. à¸ªà¸£à¹‰à¸²à¸‡ Service (à¸‰à¸µà¸” userRepo à¹€à¸‚à¹‰à¸²à¹„à¸›)
	userService := service.NewUserService(userRepo)

	// 3. à¸ªà¸£à¹‰à¸²à¸‡ Controller (à¸‰à¸µà¸” userService à¹€à¸‚à¹‰à¸²à¹„à¸›)
	userController := controller.NewUserController(userService)

	// Setup routes
	setupRoutes(app, userController)

	log.Println("ðŸ”¨ Constructor Injection API running on :3000")
	log.Fatal(app.Listen(":3000"))
}

// setupRoutes configures all routes
func setupRoutes(app *fiber.App, userController *controller.UserController) {
	// Health check
	app.Get("/", func(c *fiber.Ctx) error {
		return c.JSON(fiber.Map{
			"message": "ðŸ”¨ Constructor Injection API",
			"pattern": "Manual DI - à¸ªà¸£à¹‰à¸²à¸‡ dependencies à¹€à¸­à¸‡",
			"pros":    "Simple, Fast, Safe",
			"cons":    "Verbose when many dependencies",
		})
	})

	// User endpoints
	users := app.Group("/users")
	users.Get("/", userController.GetAllUsers)
	users.Post("/", userController.CreateUser)
	users.Get("/:id", userController.GetUserByID)
	users.Put("/:id", userController.UpdateUser)
	users.Delete("/:id", userController.DeleteUser)
}
