package container

import (
	"dig-di/controller"
	"dig-di/repository"
	"dig-di/service"

	"go.uber.org/dig"
)

// BuildContainer ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞ configure Dig container
func BuildContainer() *dig.Container {
	container := dig.New()

	// üèóÔ∏è ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô Constructors ‡∏ó‡∏∏‡∏Å‡∏ï‡∏±‡∏ß
	// Dig ‡∏à‡∏∞‡∏´‡∏≤‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏≠‡∏á

	// 1. Repository layer (‡πÑ‡∏°‡πà‡∏°‡∏µ dependencies)
	if err := container.Provide(repository.NewUserRepository); err != nil {
		panic("Failed to provide UserRepository: " + err.Error())
	}

	// 2. Service layer (‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ UserRepository)
	if err := container.Provide(service.NewUserService); err != nil {
		panic("Failed to provide UserService: " + err.Error())
	}

	// 3. Controller layer (‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ UserService)
	if err := container.Provide(controller.NewUserController); err != nil {
		panic("Failed to provide UserController: " + err.Error())
	}

	return container
}

// ‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏° struct ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Fiber app ‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ inject
type FiberApp struct {
	UserController *controller.UserController
}
